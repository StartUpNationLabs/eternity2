// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flightradar.proto" (package "fr24.feed.api.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Feed } from "./flightradar";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FeedItem } from "./flightradar";
import type { LiveFeedRequest } from "./flightradar";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fr24.feed.api.v1.Feed
 */
export interface IFeedClient {
    /**
     * @generated from protobuf rpc: LiveFeed(fr24.feed.api.v1.LiveFeedRequest) returns (stream fr24.feed.api.v1.FeedItem);
     */
    liveFeed(input: LiveFeedRequest, options?: RpcOptions): ServerStreamingCall<LiveFeedRequest, FeedItem>;
}
/**
 * @generated from protobuf service fr24.feed.api.v1.Feed
 */
export class FeedClient implements IFeedClient, ServiceInfo {
    typeName = Feed.typeName;
    methods = Feed.methods;
    options = Feed.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: LiveFeed(fr24.feed.api.v1.LiveFeedRequest) returns (stream fr24.feed.api.v1.FeedItem);
     */
    liveFeed(input: LiveFeedRequest, options?: RpcOptions): ServerStreamingCall<LiveFeedRequest, FeedItem> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LiveFeedRequest, FeedItem>("serverStreaming", this._transport, method, opt, input);
    }
}
