# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from solver.v1 import solver_pb2 as solver_dot_v1_dot_solver__pb2


class SolverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Solve = channel.unary_stream(
                '/solver.v1.Solver/Solve',
                request_serializer=solver_dot_v1_dot_solver__pb2.SolverSolveRequest.SerializeToString,
                response_deserializer=solver_dot_v1_dot_solver__pb2.SolverSolveResponse.FromString,
                )
        self.SolveStepByStep = channel.unary_stream(
                '/solver.v1.Solver/SolveStepByStep',
                request_serializer=solver_dot_v1_dot_solver__pb2.SolverSolveRequest.SerializeToString,
                response_deserializer=solver_dot_v1_dot_solver__pb2.SolverStepByStepResponse.FromString,
                )


class SolverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Solve(self, request, context):
        """streams the data in response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SolveStepByStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SolverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Solve': grpc.unary_stream_rpc_method_handler(
                    servicer.Solve,
                    request_deserializer=solver_dot_v1_dot_solver__pb2.SolverSolveRequest.FromString,
                    response_serializer=solver_dot_v1_dot_solver__pb2.SolverSolveResponse.SerializeToString,
            ),
            'SolveStepByStep': grpc.unary_stream_rpc_method_handler(
                    servicer.SolveStepByStep,
                    request_deserializer=solver_dot_v1_dot_solver__pb2.SolverSolveRequest.FromString,
                    response_serializer=solver_dot_v1_dot_solver__pb2.SolverStepByStepResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'solver.v1.Solver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Solver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solver.v1.Solver/Solve',
            solver_dot_v1_dot_solver__pb2.SolverSolveRequest.SerializeToString,
            solver_dot_v1_dot_solver__pb2.SolverSolveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SolveStepByStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/solver.v1.Solver/SolveStepByStep',
            solver_dot_v1_dot_solver__pb2.SolverSolveRequest.SerializeToString,
            solver_dot_v1_dot_solver__pb2.SolverStepByStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
