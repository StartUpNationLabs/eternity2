// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flightradar.proto" (package "fr24.feed.api.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message fr24.feed.api.v1.Bounds
 */
export interface Bounds {
    /**
     * @generated from protobuf field: float north = 1;
     */
    north: number;
    /**
     * @generated from protobuf field: float south = 2;
     */
    south: number;
    /**
     * @generated from protobuf field: float west = 3;
     */
    west: number;
    /**
     * @generated from protobuf field: float east = 4;
     */
    east: number;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Settings
 */
export interface Settings {
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.DataSource sourcesList = 1;
     */
    sourcesList: DataSource[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Service servicesList = 2;
     */
    servicesList: Service[];
    /**
     * @generated from protobuf field: fr24.feed.api.v1.TrafficType trafficType = 3;
     */
    trafficType: TrafficType;
    /**
     * @generated from protobuf field: bool onlyRestricted = 4;
     */
    onlyRestricted: boolean;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.FieldMask
 */
export interface FieldMask {
    /**
     * @generated from protobuf field: repeated string pathsList = 1;
     */
    pathsList: string[];
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Range
 */
export interface Range {
    /**
     * @generated from protobuf field: int32 min = 1;
     */
    min: number;
    /**
     * @generated from protobuf field: int32 max = 2;
     */
    max: number;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Airline
 */
export interface Airline {
    /**
     * @generated from protobuf field: string icao = 1;
     */
    icao: string;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.AirlineFilterType type = 2;
     */
    type: AirlineFilterType;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Airport
 */
export interface Airport {
    /**
     * @generated from protobuf field: string iata = 1;
     */
    iata: string;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.AirportFilterType type = 2;
     */
    type: AirportFilterType;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Origin
 */
export interface Origin {
    /**
     * @generated from protobuf field: string iata = 1;
     */
    iata: string;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Destination
 */
export interface Destination {
    /**
     * @generated from protobuf field: string iata = 1;
     */
    iata: string;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Range altitudeRangesList = 1;
     */
    altitudeRangesList: Range[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Range speedRangesList = 2;
     */
    speedRangesList: Range[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Airline airlinesList = 3;
     */
    airlinesList: Airline[];
    /**
     * @generated from protobuf field: repeated string callsignsList = 4;
     */
    callsignsList: string[];
    /**
     * @generated from protobuf field: repeated string radarsList = 5;
     */
    radarsList: string[];
    /**
     * @generated from protobuf field: repeated string regsList = 6;
     */
    regsList: string[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Airport airportsList = 7;
     */
    airportsList: Airport[];
    /**
     * @generated from protobuf field: repeated string flightsList = 8;
     */
    flightsList: string[];
    /**
     * @generated from protobuf field: repeated string typesList = 9;
     */
    typesList: string[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Range birthYearRangesList = 10;
     */
    birthYearRangesList: Range[];
    /**
     * @generated from protobuf field: repeated int32 squawksList = 11;
     */
    squawksList: number[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Origin originsList = 12;
     */
    originsList: Origin[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Destination destinationsList = 13;
     */
    destinationsList: Destination[];
    /**
     * @generated from protobuf field: repeated int32 categoriesList = 14;
     */
    categoriesList: number[];
    /**
     * @generated from protobuf field: repeated string airspacesList = 15;
     */
    airspacesList: string[];
}
/**
 * @generated from protobuf message fr24.feed.api.v1.LiveFeedRequest
 */
export interface LiveFeedRequest {
    /**
     * @generated from protobuf field: fr24.feed.api.v1.Bounds bounds = 1;
     */
    bounds?: Bounds;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.Settings settings = 2;
     */
    settings?: Settings;
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Filter filtersList = 3;
     */
    filtersList: Filter[];
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Filter fleetsList = 4;
     */
    fleetsList: Filter[];
    /**
     * @generated from protobuf field: bool highlightMode = 5;
     */
    highlightMode: boolean;
    /**
     * @generated from protobuf field: bool stats = 6;
     */
    stats: boolean;
    /**
     * @generated from protobuf field: uint32 limit = 7;
     */
    limit: number;
    /**
     * @generated from protobuf field: uint32 maxage = 8;
     */
    maxage: number;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.RestrictionVisibility restrictionMode = 9;
     */
    restrictionMode: RestrictionVisibility;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.FieldMask fieldMask = 10;
     */
    fieldMask?: FieldMask;
    /**
     * @generated from protobuf field: repeated int32 selectedFlightIdsList = 11;
     */
    selectedFlightIdsList: number[];
}
/**
 * @generated from protobuf message fr24.feed.api.v1.Flight
 */
export interface Flight {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: double latitude = 2;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 3;
     */
    longitude: number;
    /**
     * @generated from protobuf field: string icao = 4;
     */
    icao: string;
    /**
     * @generated from protobuf field: double track = 5;
     */
    track: number;
    /**
     * @generated from protobuf field: double altitude = 6;
     */
    altitude: number;
    /**
     * @generated from protobuf field: double speed = 7;
     */
    speed: number;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.Icon icon = 8;
     */
    icon: Icon;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.Status status = 9;
     */
    status: Status;
    /**
     * @generated from protobuf field: int64 timestamp = 10;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: bool onGround = 11;
     */
    onGround: boolean;
    /**
     * @generated from protobuf field: string callsign = 12;
     */
    callsign: string;
    /**
     * @generated from protobuf field: string squawk = 13;
     */
    squawk: string;
    /**
     * @generated from protobuf field: fr24.feed.api.v1.DataSource dataSource = 14;
     */
    dataSource: DataSource;
    /**
     * @generated from protobuf field: string schedule = 15;
     */
    schedule: string;
    /**
     * @generated from protobuf field: string ems = 16;
     */
    ems: string;
}
/**
 * @generated from protobuf message fr24.feed.api.v1.FlightsStats
 */
export interface FlightsStats {
    /**
     * @generated from protobuf field: map<string, int32> visible = 1;
     */
    visible: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: map<string, int32> total = 2;
     */
    total: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message fr24.feed.api.v1.FeedItem
 */
export interface FeedItem {
    /**
     * @generated from protobuf field: repeated fr24.feed.api.v1.Flight flightMap = 1;
     */
    flightMap: Flight[];
    /**
     * @generated from protobuf field: fr24.feed.api.v1.FlightsStats stats = 2;
     */
    stats?: FlightsStats;
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.AirlineFilterType
 */
export enum AirlineFilterType {
    /**
     * @generated from protobuf enum value: PAINTED_AS = 0;
     */
    PAINTED_AS = 0,
    /**
     * @generated from protobuf enum value: OPERATED_BY = 1;
     */
    OPERATED_BY = 1
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.AirportFilterType
 */
export enum AirportFilterType {
    /**
     * @generated from protobuf enum value: BOTH = 0;
     */
    BOTH = 0,
    /**
     * @generated from protobuf enum value: INBOUND = 1;
     */
    INBOUND = 1,
    /**
     * @generated from protobuf enum value: OUTBOUND = 2;
     */
    OUTBOUND = 2
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.DataSource
 */
export enum DataSource {
    /**
     * @generated from protobuf enum value: ADSB = 0;
     */
    ADSB = 0,
    /**
     * @generated from protobuf enum value: MLAT = 1;
     */
    MLAT = 1,
    /**
     * @generated from protobuf enum value: FLARM = 2;
     */
    FLARM = 2,
    /**
     * @generated from protobuf enum value: FAA = 3;
     */
    FAA = 3,
    /**
     * @generated from protobuf enum value: ESTIMATED = 4;
     */
    ESTIMATED = 4,
    /**
     * @generated from protobuf enum value: SATELLITE = 5;
     */
    SATELLITE = 5,
    /**
     * @generated from protobuf enum value: OTHER_DATA_SOURCE = 6;
     */
    OTHER_DATA_SOURCE = 6,
    /**
     * @generated from protobuf enum value: UAT = 7;
     */
    UAT = 7,
    /**
     * @generated from protobuf enum value: SPIDERTRACKS = 8;
     */
    SPIDERTRACKS = 8,
    /**
     * @generated from protobuf enum value: AUS = 9;
     */
    AUS = 9
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.EmergencyStatus
 */
export enum EmergencyStatus {
    /**
     * @generated from protobuf enum value: NO_EMERGENCY = 0;
     */
    NO_EMERGENCY = 0,
    /**
     * @generated from protobuf enum value: GENERAL_EMERGENCY = 1;
     */
    GENERAL_EMERGENCY = 1,
    /**
     * @generated from protobuf enum value: LIFEGUARD_MEDICAL_EMERGENCY = 2;
     */
    LIFEGUARD_MEDICAL_EMERGENCY = 2,
    /**
     * @generated from protobuf enum value: MINIMUM_FUEL = 3;
     */
    MINIMUM_FUEL = 3,
    /**
     * @generated from protobuf enum value: NO_COMMUNICATIONS = 4;
     */
    NO_COMMUNICATIONS = 4,
    /**
     * @generated from protobuf enum value: UNLAWFUL_INTERFERENCE = 5;
     */
    UNLAWFUL_INTERFERENCE = 5,
    /**
     * @generated from protobuf enum value: DOWNED_AIRCRAFT = 6;
     */
    DOWNED_AIRCRAFT = 6,
    /**
     * @generated from protobuf enum value: RESERVED = 7;
     */
    RESERVED = 7
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.Icon
 */
export enum Icon {
    /**
     * @generated from protobuf enum value: B738 = 0;
     */
    B738 = 0,
    /**
     * @generated from protobuf enum value: FGTR = 1;
     */
    FGTR = 1,
    /**
     * @generated from protobuf enum value: ASW20 = 2;
     */
    ASW20 = 2,
    /**
     * @generated from protobuf enum value: C206 = 3;
     */
    C206 = 3,
    /**
     * @generated from protobuf enum value: C303 = 4;
     */
    C303 = 4,
    /**
     * @generated from protobuf enum value: LJ60 = 5;
     */
    LJ60 = 5,
    /**
     * @generated from protobuf enum value: Q300 = 6;
     */
    Q300 = 6,
    /**
     * @generated from protobuf enum value: B736 = 7;
     */
    B736 = 7,
    /**
     * @generated from protobuf enum value: FOKKER100 = 8;
     */
    FOKKER100 = 8,
    /**
     * @generated from protobuf enum value: RJ85 = 9;
     */
    RJ85 = 9,
    /**
     * @generated from protobuf enum value: A320 = 10;
     */
    A320 = 10,
    /**
     * @generated from protobuf enum value: B757 = 11;
     */
    B757 = 11,
    /**
     * @generated from protobuf enum value: B767 = 12;
     */
    B767 = 12,
    /**
     * @generated from protobuf enum value: A3ST = 13;
     */
    A3ST = 13,
    /**
     * @generated from protobuf enum value: MD11 = 14;
     */
    MD11 = 14,
    /**
     * @generated from protobuf enum value: A330 = 15;
     */
    A330 = 15,
    /**
     * @generated from protobuf enum value: A343 = 16;
     */
    A343 = 16,
    /**
     * @generated from protobuf enum value: A346 = 17;
     */
    A346 = 17,
    /**
     * @generated from protobuf enum value: B777 = 18;
     */
    B777 = 18,
    /**
     * @generated from protobuf enum value: B747 = 19;
     */
    B747 = 19,
    /**
     * @generated from protobuf enum value: A380 = 20;
     */
    A380 = 20,
    /**
     * @generated from protobuf enum value: A225 = 21;
     */
    A225 = 21,
    /**
     * @generated from protobuf enum value: SI2 = 22;
     */
    SI2 = 22,
    /**
     * @generated from protobuf enum value: EC = 23;
     */
    EC = 23,
    /**
     * @generated from protobuf enum value: BALL = 24;
     */
    BALL = 24,
    /**
     * @generated from protobuf enum value: GRND = 25;
     */
    GRND = 25,
    /**
     * @generated from protobuf enum value: SLEI = 26;
     */
    SLEI = 26,
    /**
     * @generated from protobuf enum value: DRON = 27;
     */
    DRON = 27,
    /**
     * @generated from protobuf enum value: SAT = 28;
     */
    SAT = 28,
    /**
     * @generated from protobuf enum value: ISS = 29;
     */
    ISS = 29
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.RestrictionVisibility
 */
export enum RestrictionVisibility {
    /**
     * @generated from protobuf enum value: NOT_VISIBLE = 0;
     */
    NOT_VISIBLE = 0,
    /**
     * @generated from protobuf enum value: RESTRICTED_INCLUDED = 1;
     */
    RESTRICTED_INCLUDED = 1,
    /**
     * @generated from protobuf enum value: RESTRICTED_ONLY = 2;
     */
    RESTRICTED_ONLY = 2
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.Service
 */
export enum Service {
    /**
     * @generated from protobuf enum value: PASSENGER = 0;
     */
    PASSENGER = 0,
    /**
     * @generated from protobuf enum value: CARGO = 1;
     */
    CARGO = 1,
    /**
     * @generated from protobuf enum value: MILITARY_AND_GOVERNMENT = 2;
     */
    MILITARY_AND_GOVERNMENT = 2,
    /**
     * @generated from protobuf enum value: BUSINESS_JETS = 3;
     */
    BUSINESS_JETS = 3,
    /**
     * @generated from protobuf enum value: GENERAL_AVIATION = 4;
     */
    GENERAL_AVIATION = 4,
    /**
     * @generated from protobuf enum value: HELICOPTERS = 5;
     */
    HELICOPTERS = 5,
    /**
     * @generated from protobuf enum value: LIGHTER_THAN_AIR = 6;
     */
    LIGHTER_THAN_AIR = 6,
    /**
     * @generated from protobuf enum value: GLIDERS = 7;
     */
    GLIDERS = 7,
    /**
     * @generated from protobuf enum value: DRONES = 8;
     */
    DRONES = 8,
    /**
     * @generated from protobuf enum value: GROUND_VEHICLES = 9;
     */
    GROUND_VEHICLES = 9,
    /**
     * @generated from protobuf enum value: OTHER_SERVICE = 10;
     */
    OTHER_SERVICE = 10,
    /**
     * @generated from protobuf enum value: NON_CATEGORIZED = 11;
     */
    NON_CATEGORIZED = 11
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.Status
 */
export enum Status {
    /**
     * @generated from protobuf enum value: NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * @generated from protobuf enum value: BACKGROUND = 1;
     */
    BACKGROUND = 1,
    /**
     * @generated from protobuf enum value: EMERGENCY = 2;
     */
    EMERGENCY = 2,
    /**
     * @generated from protobuf enum value: NOT_AVAILABLE = 3;
     */
    NOT_AVAILABLE = 3,
    /**
     * @generated from protobuf enum value: LIVE = 4;
     */
    LIVE = 4
}
/**
 * @generated from protobuf enum fr24.feed.api.v1.TrafficType
 */
export enum TrafficType {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: GROUND_ONLY = 1;
     */
    GROUND_ONLY = 1,
    /**
     * @generated from protobuf enum value: AIRBORNE_ONLY = 2;
     */
    AIRBORNE_ONLY = 2,
    /**
     * @generated from protobuf enum value: ALL = 3;
     */
    ALL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Bounds$Type extends MessageType<Bounds> {
    constructor() {
        super("fr24.feed.api.v1.Bounds", [
            { no: 1, name: "north", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "south", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "west", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "east", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Bounds>): Bounds {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.north = 0;
        message.south = 0;
        message.west = 0;
        message.east = 0;
        if (value !== undefined)
            reflectionMergePartial<Bounds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bounds): Bounds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float north */ 1:
                    message.north = reader.float();
                    break;
                case /* float south */ 2:
                    message.south = reader.float();
                    break;
                case /* float west */ 3:
                    message.west = reader.float();
                    break;
                case /* float east */ 4:
                    message.east = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bounds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float north = 1; */
        if (message.north !== 0)
            writer.tag(1, WireType.Bit32).float(message.north);
        /* float south = 2; */
        if (message.south !== 0)
            writer.tag(2, WireType.Bit32).float(message.south);
        /* float west = 3; */
        if (message.west !== 0)
            writer.tag(3, WireType.Bit32).float(message.west);
        /* float east = 4; */
        if (message.east !== 0)
            writer.tag(4, WireType.Bit32).float(message.east);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Bounds
 */
export const Bounds = new Bounds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings$Type extends MessageType<Settings> {
    constructor() {
        super("fr24.feed.api.v1.Settings", [
            { no: 1, name: "sourcesList", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["fr24.feed.api.v1.DataSource", DataSource] },
            { no: 2, name: "servicesList", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["fr24.feed.api.v1.Service", Service] },
            { no: 3, name: "trafficType", kind: "enum", T: () => ["fr24.feed.api.v1.TrafficType", TrafficType] },
            { no: 4, name: "onlyRestricted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Settings>): Settings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourcesList = [];
        message.servicesList = [];
        message.trafficType = 0;
        message.onlyRestricted = false;
        if (value !== undefined)
            reflectionMergePartial<Settings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Settings): Settings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fr24.feed.api.v1.DataSource sourcesList */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sourcesList.push(reader.int32());
                    else
                        message.sourcesList.push(reader.int32());
                    break;
                case /* repeated fr24.feed.api.v1.Service servicesList */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.servicesList.push(reader.int32());
                    else
                        message.servicesList.push(reader.int32());
                    break;
                case /* fr24.feed.api.v1.TrafficType trafficType */ 3:
                    message.trafficType = reader.int32();
                    break;
                case /* bool onlyRestricted */ 4:
                    message.onlyRestricted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Settings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fr24.feed.api.v1.DataSource sourcesList = 1; */
        if (message.sourcesList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sourcesList.length; i++)
                writer.int32(message.sourcesList[i]);
            writer.join();
        }
        /* repeated fr24.feed.api.v1.Service servicesList = 2; */
        if (message.servicesList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.servicesList.length; i++)
                writer.int32(message.servicesList[i]);
            writer.join();
        }
        /* fr24.feed.api.v1.TrafficType trafficType = 3; */
        if (message.trafficType !== 0)
            writer.tag(3, WireType.Varint).int32(message.trafficType);
        /* bool onlyRestricted = 4; */
        if (message.onlyRestricted !== false)
            writer.tag(4, WireType.Varint).bool(message.onlyRestricted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Settings
 */
export const Settings = new Settings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMask$Type extends MessageType<FieldMask> {
    constructor() {
        super("fr24.feed.api.v1.FieldMask", [
            { no: 1, name: "pathsList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldMask>): FieldMask {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pathsList = [];
        if (value !== undefined)
            reflectionMergePartial<FieldMask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldMask): FieldMask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string pathsList */ 1:
                    message.pathsList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldMask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string pathsList = 1; */
        for (let i = 0; i < message.pathsList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.pathsList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.FieldMask
 */
export const FieldMask = new FieldMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Range$Type extends MessageType<Range> {
    constructor() {
        super("fr24.feed.api.v1.Range", [
            { no: 1, name: "min", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Range>): Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Range): Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min */ 1:
                    message.min = reader.int32();
                    break;
                case /* int32 max */ 2:
                    message.max = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Varint).int32(message.min);
        /* int32 max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Varint).int32(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Range
 */
export const Range = new Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Airline$Type extends MessageType<Airline> {
    constructor() {
        super("fr24.feed.api.v1.Airline", [
            { no: 1, name: "icao", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["fr24.feed.api.v1.AirlineFilterType", AirlineFilterType] }
        ]);
    }
    create(value?: PartialMessage<Airline>): Airline {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.icao = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Airline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Airline): Airline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icao */ 1:
                    message.icao = reader.string();
                    break;
                case /* fr24.feed.api.v1.AirlineFilterType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Airline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string icao = 1; */
        if (message.icao !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icao);
        /* fr24.feed.api.v1.AirlineFilterType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Airline
 */
export const Airline = new Airline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Airport$Type extends MessageType<Airport> {
    constructor() {
        super("fr24.feed.api.v1.Airport", [
            { no: 1, name: "iata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["fr24.feed.api.v1.AirportFilterType", AirportFilterType] }
        ]);
    }
    create(value?: PartialMessage<Airport>): Airport {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iata = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Airport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Airport): Airport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iata */ 1:
                    message.iata = reader.string();
                    break;
                case /* fr24.feed.api.v1.AirportFilterType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Airport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iata = 1; */
        if (message.iata !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iata);
        /* fr24.feed.api.v1.AirportFilterType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Airport
 */
export const Airport = new Airport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Origin$Type extends MessageType<Origin> {
    constructor() {
        super("fr24.feed.api.v1.Origin", [
            { no: 1, name: "iata", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Origin>): Origin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iata = "";
        if (value !== undefined)
            reflectionMergePartial<Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Origin): Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iata */ 1:
                    message.iata = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iata = 1; */
        if (message.iata !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Origin
 */
export const Origin = new Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Destination$Type extends MessageType<Destination> {
    constructor() {
        super("fr24.feed.api.v1.Destination", [
            { no: 1, name: "iata", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Destination>): Destination {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iata = "";
        if (value !== undefined)
            reflectionMergePartial<Destination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Destination): Destination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iata */ 1:
                    message.iata = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Destination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iata = 1; */
        if (message.iata !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Destination
 */
export const Destination = new Destination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("fr24.feed.api.v1.Filter", [
            { no: 1, name: "altitudeRangesList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Range },
            { no: 2, name: "speedRangesList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Range },
            { no: 3, name: "airlinesList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Airline },
            { no: 4, name: "callsignsList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "radarsList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "regsList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "airportsList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Airport },
            { no: 8, name: "flightsList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "typesList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "birthYearRangesList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Range },
            { no: 11, name: "squawksList", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "originsList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Origin },
            { no: 13, name: "destinationsList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Destination },
            { no: 14, name: "categoriesList", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "airspacesList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.altitudeRangesList = [];
        message.speedRangesList = [];
        message.airlinesList = [];
        message.callsignsList = [];
        message.radarsList = [];
        message.regsList = [];
        message.airportsList = [];
        message.flightsList = [];
        message.typesList = [];
        message.birthYearRangesList = [];
        message.squawksList = [];
        message.originsList = [];
        message.destinationsList = [];
        message.categoriesList = [];
        message.airspacesList = [];
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fr24.feed.api.v1.Range altitudeRangesList */ 1:
                    message.altitudeRangesList.push(Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated fr24.feed.api.v1.Range speedRangesList */ 2:
                    message.speedRangesList.push(Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated fr24.feed.api.v1.Airline airlinesList */ 3:
                    message.airlinesList.push(Airline.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string callsignsList */ 4:
                    message.callsignsList.push(reader.string());
                    break;
                case /* repeated string radarsList */ 5:
                    message.radarsList.push(reader.string());
                    break;
                case /* repeated string regsList */ 6:
                    message.regsList.push(reader.string());
                    break;
                case /* repeated fr24.feed.api.v1.Airport airportsList */ 7:
                    message.airportsList.push(Airport.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string flightsList */ 8:
                    message.flightsList.push(reader.string());
                    break;
                case /* repeated string typesList */ 9:
                    message.typesList.push(reader.string());
                    break;
                case /* repeated fr24.feed.api.v1.Range birthYearRangesList */ 10:
                    message.birthYearRangesList.push(Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 squawksList */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.squawksList.push(reader.int32());
                    else
                        message.squawksList.push(reader.int32());
                    break;
                case /* repeated fr24.feed.api.v1.Origin originsList */ 12:
                    message.originsList.push(Origin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated fr24.feed.api.v1.Destination destinationsList */ 13:
                    message.destinationsList.push(Destination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 categoriesList */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categoriesList.push(reader.int32());
                    else
                        message.categoriesList.push(reader.int32());
                    break;
                case /* repeated string airspacesList */ 15:
                    message.airspacesList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fr24.feed.api.v1.Range altitudeRangesList = 1; */
        for (let i = 0; i < message.altitudeRangesList.length; i++)
            Range.internalBinaryWrite(message.altitudeRangesList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated fr24.feed.api.v1.Range speedRangesList = 2; */
        for (let i = 0; i < message.speedRangesList.length; i++)
            Range.internalBinaryWrite(message.speedRangesList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated fr24.feed.api.v1.Airline airlinesList = 3; */
        for (let i = 0; i < message.airlinesList.length; i++)
            Airline.internalBinaryWrite(message.airlinesList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string callsignsList = 4; */
        for (let i = 0; i < message.callsignsList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.callsignsList[i]);
        /* repeated string radarsList = 5; */
        for (let i = 0; i < message.radarsList.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.radarsList[i]);
        /* repeated string regsList = 6; */
        for (let i = 0; i < message.regsList.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.regsList[i]);
        /* repeated fr24.feed.api.v1.Airport airportsList = 7; */
        for (let i = 0; i < message.airportsList.length; i++)
            Airport.internalBinaryWrite(message.airportsList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated string flightsList = 8; */
        for (let i = 0; i < message.flightsList.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.flightsList[i]);
        /* repeated string typesList = 9; */
        for (let i = 0; i < message.typesList.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.typesList[i]);
        /* repeated fr24.feed.api.v1.Range birthYearRangesList = 10; */
        for (let i = 0; i < message.birthYearRangesList.length; i++)
            Range.internalBinaryWrite(message.birthYearRangesList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 squawksList = 11; */
        if (message.squawksList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.squawksList.length; i++)
                writer.int32(message.squawksList[i]);
            writer.join();
        }
        /* repeated fr24.feed.api.v1.Origin originsList = 12; */
        for (let i = 0; i < message.originsList.length; i++)
            Origin.internalBinaryWrite(message.originsList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated fr24.feed.api.v1.Destination destinationsList = 13; */
        for (let i = 0; i < message.destinationsList.length; i++)
            Destination.internalBinaryWrite(message.destinationsList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 categoriesList = 14; */
        if (message.categoriesList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categoriesList.length; i++)
                writer.int32(message.categoriesList[i]);
            writer.join();
        }
        /* repeated string airspacesList = 15; */
        for (let i = 0; i < message.airspacesList.length; i++)
            writer.tag(15, WireType.LengthDelimited).string(message.airspacesList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveFeedRequest$Type extends MessageType<LiveFeedRequest> {
    constructor() {
        super("fr24.feed.api.v1.LiveFeedRequest", [
            { no: 1, name: "bounds", kind: "message", T: () => Bounds },
            { no: 2, name: "settings", kind: "message", T: () => Settings },
            { no: 3, name: "filtersList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter },
            { no: 4, name: "fleetsList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter },
            { no: 5, name: "highlightMode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "stats", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "maxage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "restrictionMode", kind: "enum", T: () => ["fr24.feed.api.v1.RestrictionVisibility", RestrictionVisibility] },
            { no: 10, name: "fieldMask", kind: "message", T: () => FieldMask },
            { no: 11, name: "selectedFlightIdsList", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LiveFeedRequest>): LiveFeedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filtersList = [];
        message.fleetsList = [];
        message.highlightMode = false;
        message.stats = false;
        message.limit = 0;
        message.maxage = 0;
        message.restrictionMode = 0;
        message.selectedFlightIdsList = [];
        if (value !== undefined)
            reflectionMergePartial<LiveFeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveFeedRequest): LiveFeedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fr24.feed.api.v1.Bounds bounds */ 1:
                    message.bounds = Bounds.internalBinaryRead(reader, reader.uint32(), options, message.bounds);
                    break;
                case /* fr24.feed.api.v1.Settings settings */ 2:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                case /* repeated fr24.feed.api.v1.Filter filtersList */ 3:
                    message.filtersList.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated fr24.feed.api.v1.Filter fleetsList */ 4:
                    message.fleetsList.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool highlightMode */ 5:
                    message.highlightMode = reader.bool();
                    break;
                case /* bool stats */ 6:
                    message.stats = reader.bool();
                    break;
                case /* uint32 limit */ 7:
                    message.limit = reader.uint32();
                    break;
                case /* uint32 maxage */ 8:
                    message.maxage = reader.uint32();
                    break;
                case /* fr24.feed.api.v1.RestrictionVisibility restrictionMode */ 9:
                    message.restrictionMode = reader.int32();
                    break;
                case /* fr24.feed.api.v1.FieldMask fieldMask */ 10:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                case /* repeated int32 selectedFlightIdsList */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectedFlightIdsList.push(reader.int32());
                    else
                        message.selectedFlightIdsList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveFeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fr24.feed.api.v1.Bounds bounds = 1; */
        if (message.bounds)
            Bounds.internalBinaryWrite(message.bounds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* fr24.feed.api.v1.Settings settings = 2; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated fr24.feed.api.v1.Filter filtersList = 3; */
        for (let i = 0; i < message.filtersList.length; i++)
            Filter.internalBinaryWrite(message.filtersList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated fr24.feed.api.v1.Filter fleetsList = 4; */
        for (let i = 0; i < message.fleetsList.length; i++)
            Filter.internalBinaryWrite(message.fleetsList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool highlightMode = 5; */
        if (message.highlightMode !== false)
            writer.tag(5, WireType.Varint).bool(message.highlightMode);
        /* bool stats = 6; */
        if (message.stats !== false)
            writer.tag(6, WireType.Varint).bool(message.stats);
        /* uint32 limit = 7; */
        if (message.limit !== 0)
            writer.tag(7, WireType.Varint).uint32(message.limit);
        /* uint32 maxage = 8; */
        if (message.maxage !== 0)
            writer.tag(8, WireType.Varint).uint32(message.maxage);
        /* fr24.feed.api.v1.RestrictionVisibility restrictionMode = 9; */
        if (message.restrictionMode !== 0)
            writer.tag(9, WireType.Varint).int32(message.restrictionMode);
        /* fr24.feed.api.v1.FieldMask fieldMask = 10; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 selectedFlightIdsList = 11; */
        if (message.selectedFlightIdsList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.selectedFlightIdsList.length; i++)
                writer.int32(message.selectedFlightIdsList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.LiveFeedRequest
 */
export const LiveFeedRequest = new LiveFeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Flight$Type extends MessageType<Flight> {
    constructor() {
        super("fr24.feed.api.v1.Flight", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "icao", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "track", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "altitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "speed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "icon", kind: "enum", T: () => ["fr24.feed.api.v1.Icon", Icon] },
            { no: 9, name: "status", kind: "enum", T: () => ["fr24.feed.api.v1.Status", Status] },
            { no: 10, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "onGround", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "callsign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "squawk", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "dataSource", kind: "enum", T: () => ["fr24.feed.api.v1.DataSource", DataSource] },
            { no: 15, name: "schedule", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "ems", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Flight>): Flight {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.latitude = 0;
        message.longitude = 0;
        message.icao = "";
        message.track = 0;
        message.altitude = 0;
        message.speed = 0;
        message.icon = 0;
        message.status = 0;
        message.timestamp = 0n;
        message.onGround = false;
        message.callsign = "";
        message.squawk = "";
        message.dataSource = 0;
        message.schedule = "";
        message.ems = "";
        if (value !== undefined)
            reflectionMergePartial<Flight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Flight): Flight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* double latitude */ 2:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 3:
                    message.longitude = reader.double();
                    break;
                case /* string icao */ 4:
                    message.icao = reader.string();
                    break;
                case /* double track */ 5:
                    message.track = reader.double();
                    break;
                case /* double altitude */ 6:
                    message.altitude = reader.double();
                    break;
                case /* double speed */ 7:
                    message.speed = reader.double();
                    break;
                case /* fr24.feed.api.v1.Icon icon */ 8:
                    message.icon = reader.int32();
                    break;
                case /* fr24.feed.api.v1.Status status */ 9:
                    message.status = reader.int32();
                    break;
                case /* int64 timestamp */ 10:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* bool onGround */ 11:
                    message.onGround = reader.bool();
                    break;
                case /* string callsign */ 12:
                    message.callsign = reader.string();
                    break;
                case /* string squawk */ 13:
                    message.squawk = reader.string();
                    break;
                case /* fr24.feed.api.v1.DataSource dataSource */ 14:
                    message.dataSource = reader.int32();
                    break;
                case /* string schedule */ 15:
                    message.schedule = reader.string();
                    break;
                case /* string ems */ 16:
                    message.ems = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Flight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* double latitude = 2; */
        if (message.latitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.latitude);
        /* double longitude = 3; */
        if (message.longitude !== 0)
            writer.tag(3, WireType.Bit64).double(message.longitude);
        /* string icao = 4; */
        if (message.icao !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icao);
        /* double track = 5; */
        if (message.track !== 0)
            writer.tag(5, WireType.Bit64).double(message.track);
        /* double altitude = 6; */
        if (message.altitude !== 0)
            writer.tag(6, WireType.Bit64).double(message.altitude);
        /* double speed = 7; */
        if (message.speed !== 0)
            writer.tag(7, WireType.Bit64).double(message.speed);
        /* fr24.feed.api.v1.Icon icon = 8; */
        if (message.icon !== 0)
            writer.tag(8, WireType.Varint).int32(message.icon);
        /* fr24.feed.api.v1.Status status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        /* int64 timestamp = 10; */
        if (message.timestamp !== 0n)
            writer.tag(10, WireType.Varint).int64(message.timestamp);
        /* bool onGround = 11; */
        if (message.onGround !== false)
            writer.tag(11, WireType.Varint).bool(message.onGround);
        /* string callsign = 12; */
        if (message.callsign !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.callsign);
        /* string squawk = 13; */
        if (message.squawk !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.squawk);
        /* fr24.feed.api.v1.DataSource dataSource = 14; */
        if (message.dataSource !== 0)
            writer.tag(14, WireType.Varint).int32(message.dataSource);
        /* string schedule = 15; */
        if (message.schedule !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.schedule);
        /* string ems = 16; */
        if (message.ems !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.ems);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.Flight
 */
export const Flight = new Flight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightsStats$Type extends MessageType<FlightsStats> {
    constructor() {
        super("fr24.feed.api.v1.FlightsStats", [
            { no: 1, name: "visible", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 2, name: "total", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<FlightsStats>): FlightsStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visible = {};
        message.total = {};
        if (value !== undefined)
            reflectionMergePartial<FlightsStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightsStats): FlightsStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, int32> visible */ 1:
                    this.binaryReadMap1(message.visible, reader, options);
                    break;
                case /* map<string, int32> total */ 2:
                    this.binaryReadMap2(message.total, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: FlightsStats["visible"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FlightsStats["visible"] | undefined, val: FlightsStats["visible"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field fr24.feed.api.v1.FlightsStats.visible");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap2(map: FlightsStats["total"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FlightsStats["total"] | undefined, val: FlightsStats["total"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field fr24.feed.api.v1.FlightsStats.total");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: FlightsStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, int32> visible = 1; */
        for (let k of globalThis.Object.keys(message.visible))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.visible[k]).join();
        /* map<string, int32> total = 2; */
        for (let k of globalThis.Object.keys(message.total))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.total[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.FlightsStats
 */
export const FlightsStats = new FlightsStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedItem$Type extends MessageType<FeedItem> {
    constructor() {
        super("fr24.feed.api.v1.FeedItem", [
            { no: 1, name: "flightMap", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Flight },
            { no: 2, name: "stats", kind: "message", T: () => FlightsStats }
        ]);
    }
    create(value?: PartialMessage<FeedItem>): FeedItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.flightMap = [];
        if (value !== undefined)
            reflectionMergePartial<FeedItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedItem): FeedItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fr24.feed.api.v1.Flight flightMap */ 1:
                    message.flightMap.push(Flight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* fr24.feed.api.v1.FlightsStats stats */ 2:
                    message.stats = FlightsStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeedItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fr24.feed.api.v1.Flight flightMap = 1; */
        for (let i = 0; i < message.flightMap.length; i++)
            Flight.internalBinaryWrite(message.flightMap[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* fr24.feed.api.v1.FlightsStats stats = 2; */
        if (message.stats)
            FlightsStats.internalBinaryWrite(message.stats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message fr24.feed.api.v1.FeedItem
 */
export const FeedItem = new FeedItem$Type();
/**
 * @generated ServiceType for protobuf service fr24.feed.api.v1.Feed
 */
export const Feed = new ServiceType("fr24.feed.api.v1.Feed", [
    { name: "LiveFeed", serverStreaming: true, options: {}, I: LiveFeedRequest, O: FeedItem }
]);
